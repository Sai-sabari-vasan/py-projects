# -*- coding: utf-8 -*-
"""collaborative filtering.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uOgH6dccUhG0l0EMWvs7YHnd62m5PW6g
"""

import numpy as np
import pandas as pd
import warnings
warnings.filterwarnings('ignore')

books=pd.read_csv('/content/Books.csv')
users=pd.read_csv('/content/Users.csv')
ratings=pd.read_csv('/content/Ratings.csv')

books.head()

ratings.head()

users.head()

books.isnull().sum()

users.isnull().sum()

ratings.isnull().sum()

print(books.shape)
print(users.shape)
print(ratings.shape)

books.duplicated().sum()

ratings.duplicated().sum()

users.duplicated().sum()

"""## popularity based recommender system"""

ratings_with_name=ratings.merge(books,on='ISBN')#merging the ratings and users
num_rating_df=ratings_with_name.groupby('Book-Title').count()['Book-Rating'].reset_index()
num_rating_df.rename(columns={'Book-Rating':'num_ratings'},inplace=True)
num_rating_df

avg_rating_df=ratings_with_name.groupby('Book-Title').count()['Book-Rating'].reset_index()
avg_rating_df.rename(columns={'Book-Rating':'avg_ratings'},inplace=True)
avg_rating_df

popular_df=num_rating_df.merge(avg_rating_df,on='Book-Title')
popular_df

popular_df = popular_df[popular_df['num_ratings'] >= 250].sort_values('avg_ratings', ascending=False)

"""## COLLABORATIVE FILTERING"""

df1=ratings_with_name=ratings.merge(books,on='ISBN')
df1

x=ratings_with_name.groupby('User-ID').count()['Book-Rating']>200
hi_rat_users=x[x].index #boolean indexing

filtered=ratings_with_name[ratings_with_name['User-ID'].isin(hi_rat_users)]
filtered

y=filtered.groupby('Book-Title').count()['Book-Rating']>=50
famous_books=y[y].index

final_rating=filtered[filtered['Book-Title'].isin(famous_books)]

pt=final_rating.pivot_table(index='Book-Title',columns='User-ID',values='Book-Rating')
pt.fillna(0,inplace=True)
pt

from sklearn.metrics.pairwise import cosine_similarity

similarity_scores=cosine_similarity(pt)
 similarity_scores.shape

def recommend(book_names):
  index=np.where(pt.index==book_names)[0][0]
  similar_items=sorted(list(enumerate(similarity_scores[index])),key=lambda x:x[1],reverse=True)[1:6]
  for i in similar_items:
    print(pt.index[i[0]])
#labda x:x[1]sorting on the basis of 1st column not the oth column i.e not the index column

recommend('4 Blondes')

